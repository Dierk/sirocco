{--
 This module handles requests and response for
 Band resources.
-}
module songs.handler.Bands where

import chinook.Core
import songs.db.Bands as DB
import songs.data.Json as JSON

{--
 List all available bands
-}
list :: IO Request -> IO Response
list req = do
    bands <- DB.findAll
    return response.{ output = JSON.render bands }

{--
  Gets a specific band by its id
-}
byId :: IO Request -> IO Response
byId req = do
  id     <- req.path ":id"
  band   <- DB.findById id
  return $ case band of
    Just b  -> response.{ output = JSON.render b }
    Nothing -> badRequestResponse


deleteById :: IO Request -> IO Response
deleteById req = do
  id   <- getIdFromParam $ req.path ":id"
  case id of
    Right idInt -> deletedResponse $ DB.deleteBandById $ Just idInt
    Left  e     -> return badRequestResponse

getIdFromParam :: IO (Maybe String) -> IO (Either NumberFormatException Int)
getIdFromParam param = do
  id <- param
  return $ case id of
    Just x  -> x.int
    Nothing -> "".int

badRequestResponse :: Response
badRequestResponse = response.{ status = 400 }

-- #TODO JSON is not shown...FIX
deletedResponse :: IO Int -> IO Response
deletedResponse rows = do
  howMany <- rows
  return response.{ status = 204,
                    output = JSON.render ("affected.rows." ++ (show howMany)) }
