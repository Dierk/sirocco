{--
  This module has all Band related queries
-}
module songs.db.Bands where

import sirocco.FDBC
import sirocco.Sirocco

import songs.db.Db
import songs.data.Bands as Model

--- Lists all available bands in database
findAll :: IO  [Model.Band]
findAll = mapToBands (query connection sql params)
  where sql    = Just "SELECT * FROM bands"
        params = [] :: [Maybe SqlParam]

--- Finds a specific band by id
findById :: Maybe String -> IO (Maybe Model.Band)
findById id = getFirst bands
  where
    sql    = Just "SELECT * FROM bands WHERE id = ?"
    params = toParam <$> [id]
    bands  = mapToBands (query connection sql params)

findAllByYears :: Maybe Int -> Maybe Int -> IO [Model.Band]
findAllByYears from to = bands
  where
    sql    = Just "SELECT * FROM bands WHERE year >= ? and year <= ?"
    params = toParam <$> [from, to]
    bands  = mapToBands (query connection sql params)

--- Maps a list of rows to Model.Band instances
mapToBands :: IO [CatchAll [SqlValue]] -> IO [Model.Band]
mapToBands = mapRowsTo toBand

--- Maps a single row to a Model.Band instances
toBand :: [SqlValue] -> Model.Band
toBand ((SqlLong id):(SqlString name):(SqlLong year):[]) = Model.Band { id = id, name = name, year = year }
toBand x = error $ "Error while parsing Band" ++ show x

--- Gets first element of a list of records
getFirst :: IO [a] -> IO (Maybe a)
getFirst results = do
  rows <- results
  return $ case rows of
    (x:_)  -> Just x
    []     -> Nothing
